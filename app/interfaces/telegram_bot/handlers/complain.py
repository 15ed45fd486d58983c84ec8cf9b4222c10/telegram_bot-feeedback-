from aiogram import F
from aiogram.types import Message, Location
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import httpx
import os
from functools import partial
import logging

logger = logging.getLogger("telegram_bot.handlers.complain")

NOTIFICATION_URL = os.getenv("NOTIFICATION_URL")
if not NOTIFICATION_URL:
    logger.critical("NOTIFICATION_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("NOTIFICATION_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


class ComplainStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_location_or_skip = State()


async def start_command(message: Message):
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≥–æ—Ä–æ–¥—Å–∫–æ–π –∂–∏–∑–Ω–∏.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/complain - –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∂–∞–ª–æ–±—É\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /complain, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É."
    )
    await message.answer(welcome_message)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start.")


async def complain_start(message: Message, db, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É.")
    await state.set_state(ComplainStates.waiting_for_description)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∂–∞–ª–æ–±—É.")


async def process_description(message: Message, db, state: FSMContext):
    description = message.text
    await state.update_data(description=description)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏?\n"
        "–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=await get_location_or_skip_keyboard()
    )
    await state.set_state(ComplainStates.waiting_for_location_or_skip)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")


async def process_location(message: Message, db, state: FSMContext):
    if message.location:
        location: Location = message.location
        data = await state.get_data()
        description = data.get("description")

        complaint_data = {
            "user_id": message.from_user.id,
            "description": description,
            "latitude": location.latitude,
            "longitude": location.longitude,
        }
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã –æ—Ç user_id: {message.from_user.id}: {complaint_data}")

        try:
            complaint = await db.complaint.create(
                data={
                    "userId": message.from_user.id,
                    "description": description,
                    "latitude": location.latitude,
                    "longitude": location.longitude,
                    "status": "pending",
                }
            )
            logger.debug(f"–ñ–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å id: {complaint.id}")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        try:
            async with httpx.AsyncClient(timeout=10) as client:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ {NOTIFICATION_URL}")
                response = await client.post(NOTIFICATION_URL, json=complaint_data)
                response.raise_for_status()
                logger.info("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å.")

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∂–∞–ª–æ–±—ã –Ω–∞ "sent"
                await db.complaint.update(
                    where={"id": complaint.id},
                    data={"status": "sent"}
                )
                logger.debug(f"–°—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã id {complaint.id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'sent'.")

                await message.answer("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        except httpx.HTTPStatusError as http_err:
            if http_err.response.status_code == 405:
                status = "server_load"
                logger.error(f"HTTP 405: –ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è {NOTIFICATION_URL}")
                await db.complaint.update(
                    where={"id": complaint.id},
                    data={"status": status}
                )
                await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
            else:
                status = "server_load"
                logger.error(f"HTTP –æ—à–∏–±–∫–∞ {http_err.response.status_code}: {http_err}")
                await db.complaint.update(
                    where={"id": complaint.id},
                    data={"status": status}
                )
                await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
        except httpx.RequestError as req_err:
            status = "server_load"
            logger.error(f"HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {req_err}")
            await db.complaint.update(
                where={"id": complaint.id},
                data={"status": status}
            )
            await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
        finally:
            await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")


async def skip_location(message: Message, db, state: FSMContext):
    data = await state.get_data()
    description = data.get("description")

    complaint_data = {
        "user_id": message.from_user.id,
        "description": description,
        "latitude": None,
        "longitude": None,
    }
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {complaint_data}")

    try:
        complaint = await db.complaint.create(
            data={
                "userId": message.from_user.id,
                "description": description,
                "latitude": None,
                "longitude": None,
                "status": "pending",
            }
        )
        logger.debug(f"–ñ–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å id: {complaint.id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ {NOTIFICATION_URL} –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
            response = await client.post(NOTIFICATION_URL, json=complaint_data)
            response.raise_for_status()
            logger.info("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å.")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∂–∞–ª–æ–±—ã –Ω–∞ "sent"
            await db.complaint.update(
                where={"id": complaint.id},
                data={"status": "sent"}
            )
            logger.debug(f"–°—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã id {complaint.id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'sent'.")

            await message.answer("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except httpx.HTTPStatusError as http_err:
        if http_err.response.status_code == 405:
            status = "server_load"
            logger.error(f"HTTP 405: –ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è {NOTIFICATION_URL}")
            await db.complaint.update(
                where={"id": complaint.id},
                data={"status": status}
            )
            await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
        else:
            status = "server_load"
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ {http_err.response.status_code}: {http_err}")
            await db.complaint.update(
                where={"id": complaint.id},
                data={"status": status}
            )
            await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
    except httpx.RequestError as req_err:
        status = "server_load"
        logger.error(f"HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {req_err}")
        await db.complaint.update(
            where={"id": complaint.id},
            data={"status": status}
        )
        await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()


async def get_location_or_skip_keyboard():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    buttons = [
        [
            KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True),
            KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


def register_complain_handler(dp, db):
    dp.message.register(start_command, Command("start"))

    dp.message.register(
        partial(complain_start, db=db),
        Command("complain")
    )
    dp.message.register(
        partial(process_description, db=db),
        ComplainStates.waiting_for_description
    )
    dp.message.register(
        partial(process_location, db=db),
        ComplainStates.waiting_for_location_or_skip,
        F.location
    )
    dp.message.register(
        partial(skip_location, db=db),
        ComplainStates.waiting_for_location_or_skip,
        F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    )
